# @see https://www.haproxy.com/documentation/hapee/latest/configuration/acls/overview/
# @see https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/
# @see https://www.haproxy.com/blog/haproxy-ssl-termination/
# @see https://www.haproxy.com/blog/path-based-routing-with-haproxy/

## this config is based on
### @see http://git.haproxy.org/?p=haproxy-2.3.git;a=blob;f=examples/acl-content-sw.cfg;h=1872789ac2d1198f4321e77c0dad4f382cc8f206;hb=HEAD


global
    # chroot  /var/empty
    daemon
    pidfile /var/run/haproxy.pid
    quiet
    log stdout format raw local0 info
    lua-load /etc/haproxy/modules/cors.lua
    maxconn 50000
    ssl-default-bind-options ssl-min-ver TLSv1.2
    stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners

defaults
    backlog 10000
    default-server init-addr last,libc,none
    log global
    mode tcp
    retries 0

    option contstats
    option dontlognull
    option forwardfor
    option http-server-close
    option httplog
    option redispatch

    timeout client          5s
    timeout connect          5s
    timeout http-keep-alive  1s
    timeout http-request    5s
    timeout queue           30s
    timeout server          5s
    timeout tarpit          60s
    timeout tunnel        3600s


# for container:8080
frontend edge
    bind :8080
    log 127.0.0.1 local0
    maxconn 10000
    option tcplog

    tcp-request content accept if { req.ssl_hello_type 1 }
    tcp-request content accept if HTTP
    tcp-request inspect-delay 100ms

    # maps 80 and 443 to one of the forward_* backends
    # which will then route to edge-load-balancer
    # which will then route to the appropriate backend
    use_backend forward_http if HTTP
    default_backend forward_https

# handles forward: 8080 > edge-load-balancer:80
backend forward_http
    server serverhttp dev.nirv.ai:80
# handles forward: 8080 > edge-load-balancer:443
backend forward_https
    server serverhttps dev.nirv.ai:443

defaults
    backlog 10000
    default-server init-addr last,libc,none
    log global
    mode http
    retries 0

    option contstats
    option dontlognull
    option forwardfor
    option http-server-close
    option httplog
    option redispatch

    timeout client          5s
    timeout connect          5s
    timeout http-keep-alive  1s
    timeout http-request    5s
    timeout queue           30s
    timeout server          5s
    timeout tarpit          60s
    timeout tunnel        3600s

frontend stats
    bind *:8404 ssl crt /etc/ssl/certs/live/dev.nirv.ai/combined.pem ssl-min-ver TLSv1.2 alpn h2,http/1.1
    stats enable
    stats uri /edge
    stats refresh 10s
    stats admin if LOCALHOST

## edge router for 80|443
frontend edge-load-balancer
    bind :80 name edgehttp
    bind :443 name edgehttps ssl crt /etc/ssl/certs/live/dev.nirv.ai/combined.pem ssl-min-ver TLSv1.2
    maxconn 10000

    capture	request	header	Host    len	20
    capture	request	header	User-Agent  len	16
    capture	request	header	Content-Length  len	10
    capture	request	header	Referer	len	20
    capture	response    header	Content-Length	len	10

    # breaks haproxy
    # # ... some HTTP content smugling and other various things
	# acl forbidden_hdrs hdr_cnt(host) gt 1
	# acl forbidden_hdrs hdr_cnt(content-length) gt 1
	# acl forbidden_hdrs hdr_val(content-length) lt 0
	# acl forbidden_hdrs hdr_cnt(proxy-authorization) gt 0
	# block if forbidden_hdrs

    # breaks haproxy
    # # block other common attacks (awstats, manual discovery...)
	# acl forbidden_uris path_dir -i chat main.php read_dump.php viewtopic.php phpbb sumthin horde _vti_bin MSOffice
	# acl forbidden_uris url_reg -i (\.php\?temppath=|\.php\?setmodules=|[=:]http://)
	# block if forbidden_uris

    # # block annoying worms that fill the logs...
	# acl forbidden_uris url_reg -i .*(\.|%2e)(\.|%2e)(%2f|%5c|/|\\\\)
	# acl forbidden_uris url_sub -i %00 <script xmlrpc.php
	# acl forbidden_uris path_end -i /root.exe /cmd.exe /default.ida /awstats.pl .asp .dll

    http-request lua.cors "GET,PUT,POST,PATCH" "dev.nirv.ai" "*"
    http-response lua.cors

	# we rewrite the "options" request so that it only tries '*', and we
	# only report GET, HEAD, POST and OPTIONS as valid methods
    # vault uses weird methods, e.g. LIST
	# reqirep         ^OPTIONS\ /.*HTTP/1\.[01]$ OPTIONS\ \\*\ HTTP/1.0
	# rspirep         ^Allow:\ .* Allow:\ GET,\ HEAD,\ POST,\ OPTIONS

    http-request redirect scheme https code 301 unless { ssl_fc }

    acl bff_path path_beg -i /bff/

    use_backend bff if bff_path
    default_backend ui
# maps path /bff to bff server
backend bff
    http-request replace-path /bff(/)?(.*) /\2
    server bff1 core_bff:3001

    # long timeout to support connection queueing
    # contimeout 20000
    # srvtimeout 20000
    # fullconn 100
    # redispatch
    # retries 3


# default path for edge
backend ui
    server ui1 core_ui:3000
    # long timeout to support connection queueing
    # contimeout 20000
    # srvtimeout 20000

# for dev.nirv.ai:8200 > 8300
frontend edge-vault
    mode http
    bind :8200 name vaulthttps ssl crt /etc/ssl/certs/live/dev.nirv.ai/combined.pem ssl-min-ver TLSv1.2

    # long timeout to support connection queueing
    # contimeout 20000
    # srvtimeout 20000

    http-request redirect scheme https code 301 unless { ssl_fc }
    use_backend vault

# maps 8300 to vault server
## dont terminate SSL as communications to VAULT must always be encrypted
backend vault
    mode http
    server vault1 core_vault:8300 ssl verify none

    # long timeout to support connection queueing
    # contimeout 20000
    # srvtimeout 20000

# frontend edge-postgres
#     mode http
#     bind :5432 name vaulthttps ssl crt /etc/ssl/certs/live/dev.nirv.ai/combined.pem ssl-min-ver TLSv1.2

#     # long timeout to support connection queueing
#     contimeout 20000
#     srvtimeout 20000

#     http-request redirect scheme https code 301 unless { ssl_fc }
#     use_backend postgres
# backend postgres
#     balance leastconn
#     mode http
#     server postgres1 core-postgres:5432

#     # long timeout to support connection queueing
#     contimeout 20000
#     srvtimeout 20000
